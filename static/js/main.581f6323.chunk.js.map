{"version":3,"sources":["logo.svg","components/Navbar.js","components/NewsArticle.js","components/NewsFeed.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","class","src","className","alt","NewsArticle","props","article","subscribers","color","JSON","stringify","slice","Segment","raised","Image","thumbnail","avatar","name","title","type","message","NewsFeed","data","this","articles","map","item","components_NewsArticle","Group","Component","Footer","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","axios","get","then","res","setState","items","feedData","Container","components_Navbar","components_NewsFeed","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"82RAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wNCWzBC,EARA,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,UACTH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,6BAA6BC,UAAU,WAAWC,IAAI,SADjE,4BCkBWC,EApBK,SAACC,GAAU,IACnBC,EAAmBD,EAAnBC,QAEFC,GAFqBF,EAAVG,MAEGF,EAAQC,aAAeD,EAAQC,YAAc,IAAM,WAASE,KAAKC,UAAUJ,EAAQC,aAAcI,MAAM,GAAI,GAAM,IAAK,WAAQL,EAAQC,aAG1J,OACEV,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAASC,QAAM,GACbhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOb,IAAKK,EAAQS,UAAYC,QAAM,IACtCnB,EAAAC,EAAAC,cAAA,QAAMG,UAAU,aAAhB,IAA8BI,EAAQW,KAAtC,KAFF,KAEuDpB,EAAAC,EAAAC,cAAA,QAAMG,UAAU,oBAAhB,IAAqCI,EAAQC,YAAcA,EAAc,GAAzE,KACrDV,EAAAC,EAAAC,cAAA,cAAMO,EAAQY,MAAd,KACCZ,EAAQa,KAAO,SAAWb,EAAQa,KAAO,KAC1CtB,EAAAC,EAAAC,cAAA,WALF,YAMYO,EAAQc,UCcXC,mLArBJ,IAICC,EAASC,KAAKlB,MAAdiB,KACJE,EAAWF,EAAOA,EAAKG,IAAI,SAAAC,GAAI,OACjC7B,EAAAC,EAAAC,cAAC4B,EAAD,CACArB,QAASoB,MAEP,GAIJ,OACE7B,EAAAC,EAAAC,cAACa,EAAA,EAAQgB,MAAT,CAAef,QAAM,GACpBW,UAnBgBK,aCORC,EATA,WACb,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,UAAX,mHCkCW+B,cA7Bb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAAQ,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAd,QACKe,MAAQ,CACXhB,KAAM,IAHIU,mFAQM,IAAAO,EAAAhB,KAClBiB,IAAMC,IAAI,kDAAkDC,KAAK,SAACC,GAChEJ,EAAKK,SAAS,CAACtB,KAAMqB,EAAIrB,KAAKuB,UAE3BtB,KAAKe,MAAMhB,MACdC,KAAKqB,SAAS,CAACtB,KAAMwB,qCAMvB,OACEjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACiD,EAAD,MACAnD,EAAAC,EAAAC,cAACkD,EAAD,CAAU3B,KAAMC,KAAKe,MAAMhB,OAC3BzB,EAAAC,EAAAC,cAACmD,EAAD,cAxBUrB,aCGEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.581f6323.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\n\nconst Navbar = () => {\n  return (\n    <div class=\"navbar\">\n      <img src='./images/studio71-logo.png' className=\"App-logo\" alt=\"logo\" /> FEED\n    </div>\n  )\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport { Segment, Image } from 'semantic-ui-react';\n\nconst NewsArticle = (props) => {\n    const { article, color } = props;\n\n    const subscribers = article.subscribers && article.subscribers > 999 ? ' • ' + (JSON.stringify(article.subscribers)).slice(0, -4)  + 'k': ' • ' + article.subscribers;\n\n\n    return (\n      <Segment raised>\n        <Image src={article.thumbnail}  avatar />\n        <span className='user-name'> {article.name} </span>  <span className='subscribers-line'> {article.subscribers ? subscribers : ''} </span>\n        <h3> {article.title} </h3>\n        {article.type ? 'type: ' + article.type : null}\n        <br/>\n        message: {article.message}\n      </Segment>\n\n    )\n\n\n}\nexport default NewsArticle;\n","import React, { Component } from 'react';\nimport NewsArticle from './NewsArticle';\nimport { Segment } from 'semantic-ui-react';\n\n\nclass NewsFeed extends Component {\n\n\n\n  render() {\n\n    // let colorOptions = ['color=red', 'color=teal', 'color=yellow', 'color=teal'];\n\n    const { data } = this.props;\n    let articles = data ? data.map(item =>\n      <NewsArticle\n      article={item}\n      />\n    ) : [];\n\n\n\n    return (\n      <Segment.Group raised>\n      {articles}\n      </Segment.Group>\n    )\n  }\n\n}\nexport default NewsFeed;\n","import React from 'react';\n\n\nconst Footer = () => {\n  return (\n    <div class=\"footer\">\n    Copyright Studio71 2018. Privacy Policy | Terms And Conditions |\nA Red Arrow Studios Company\n    </div>\n  )\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport {Navbar, NewsFeed, Footer } from './components';\nimport { Container } from 'semantic-ui-react';\nimport feedData from './data.json';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: []\n    };\n  }\n\n\n  componentDidMount() {\n    axios.get('https://assets.studio71.io/test/news_feed.json').then((res) => {\n      this.setState({data: res.data.items});\n    })\n    if (!this.state.data) {\n      this.setState({data: feedData});\n    }\n\n}\n\n  render() {\n    return (\n      <Container>\n        <Navbar />\n        <NewsFeed data={this.state.data}/>\n        <Footer />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}